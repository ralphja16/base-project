@charset "UTF-8";

/* =============================================================================
	CONFIG
============================================================================= */

$container-width: 		100em;	// Base size * $container-width
$gutter-enabled:		'false'; // True => Add gutter between grid__items
$gutter:				2em;	// Gutter between grid__items
$column--padding:		1em;	// Padding inside grid__item


/* =============================================================================
	BREAKPOINTS FOR MIN-WIDTH MEDIA QUERIES
============================================================================= */

$breakpoints-min: (
	xxs: 320px,
	// xs: 375px,
	xs: 480px,
	// xs: 568px,
	// xs: 640px,
	sm: 768px,
	ms: 800px,
	md: 992px,
	mlg: 1024px,
	lg: 1200px,
	xlg: 1440px,
	2xlg: 1600px,
	3xlg: 2000px
);


/* =============================================================================
	BREAKPOINTS FOR MAX-WIDTH MEDIA QUERIES
============================================================================= */

$breakpoints-max: (
	xxs: 319px,
	// xs: 374px,
	xs: 479px,
	// xs: 567px,
	// xs: 639px,
	sm: 767px,
	ms: 799px,
	md: 991px,
	mlg: 1023px,
	lg: 1199px,
	xl: 1439px,
	2xl: 1599px,
	3xl: 1999px
);

/* =============================================================================
	MIXIN: RESPOND-TO-MIN
	USEAGE: @include respond-to-min(sm) { ... }
============================================================================= */

@mixin respond-to-min($breakpoint) {

	@if map-has-key($breakpoints-min, $breakpoint) {

		@media screen and (min-width: #{map-get($breakpoints-min, $breakpoint)}) {
			@content;
		}
	}

	@else {

		@warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
		+ "Please make sure it is defined in `$breakpoints` map.";
	}
}


/* =============================================================================
	MIXIN: RESPOND-TO-MAX
	USEAGE: @include respond-to-max(small) { ... }
============================================================================= */

@mixin respond-to-max($breakpoint) {

	@if map-has-key($breakpoints-max, $breakpoint) {

		@media screen and (max-width: #{map-get($breakpoints-max, $breakpoint)}) {
			@content;
		}
	}

	@else {

		@warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
		+ "Please make sure it is defined in `$breakpoints` map.";
	}
}


/* =============================================================================
	Containers
============================================================================= */

.l-container {
	max-width: $container-width + $gutter;
	width: 100%;
	margin: 0 auto;
	display: table;
	padding-left: $gutter / 2;
	padding-right: $gutter / 2;

	&:before {
		display: table;
		content: " ";
	}

	&:after {
		display: table;
		content: " ";
		clear: both;
	}
}

.l-container--fluid {
	width: 100%;
	padding-left: $gutter / 2;
	padding-right: $gutter / 2;

	&:before {
		display: table;
		content: " ";
	}

	&:after {
		display: table;
		content: " ";
		clear: both;
	}
}

/* =============================================================================
	COLUMNS DEFAULT GRID
============================================================================= */

@each $key, $value in $breakpoints-min {

	@include respond-to-min($key) {

		.col-#{$key}-1 {
			width: 8.33333333%;
		}

		.col-#{$key}-2 {
			width: 16.66666667%;
		}

		.col-#{$key}-3 {
			width: 25%;
		}

		.col-#{$key}-4 {
			width: 33.33333333%;
		}

		.col-#{$key}-5 {
			width: 41.66666667%;
		}

		.col-#{$key}-6 {
			width: 50%;
		}

		.col-#{$key}-7 {
			width: 58.33333333%;
		}

		.col-#{$key}-8 {
			width: 66.66666667%;
		}

		.col-#{$key}-9 {
			width: 75%;
		}

		.col-#{$key}-10 {
			width: 83.33333333%;
		}

		.col-#{$key}-11 {
			width: 91.66666667%;
		}

		.col-#{$key}-12 {
			width: 100%;
		}
	}
}


/* =============================================================================
	COLUMNS FLEXBOX GRID
============================================================================= */

@each $key, $value in $breakpoints-min {

	@include respond-to-min($key) {

		.fl-col-#{$key}-1 {
			flex-basis: 8.33333333%;
			max-width: 8.33333333%;
		}

		.fl-col-#{$key}-2 {
			flex-basis: 16.66666667%;
			max-width: 16.66666667%;
		}

		.fl-col-#{$key}-3 {
			flex-basis: 25%;
			max-width: 25%;
		}

		.fl-col-#{$key}-4 {
			flex-basis: 33.33333333%;
			max-width: 33.33333333%;
		}

		.fl-col-#{$key}-5 {
			flex-basis: 41.66666667%;
			max-width: 41.66666667%;
		}

		.fl-col-#{$key}-6 {
			flex-basis: 505;
			max-width: 50%;
		}

		.fl-col-#{$key}-7 {
			flex-basis: 58.33333333%;
			max-width: 58.33333333%;
		}

		.fl-col-#{$key}-8 {
			flex-basis: 66.66666667%;
			max-width: 66.66666667%;
		}

		.fl-col-#{$key}-9 {
			flex-basis: 75%;
			max-width: 75%;
		}

		.fl-col-#{$key}-10 {
			flex-basis: 83.33333333%;
			max-width: 83.33333333%;
		}

		.fl-col-#{$key}-11 {
			flex-basis: 91.66666667%;
			max-width: 91.66666667%;
		}

		.fl-col-#{$key}-12 {
			flex-basis: 100%;
			max-width: 100%;
		}
	}
}


/* =============================================================================
	RESPONSIVE UTILITIES
============================================================================= */

@each $key, $value in $breakpoints-min {

	@include respond-to-min($key) {

		.hidden-#{$key} {
			display: none;
		}
	}
}

/* =============================================================================
	GRID
============================================================================= */

.row {
	margin-left: -$gutter / 2;
	margin-right: -$gutter / 2;

	&:before {
		display: table;
		content: " ";
	}

	&:after {
		display: table;
		content: " ";
		clear: both;
	}
}

[class*='col-'] {
	float: left;
	min-height: 1px;
	position: relative;
	padding: $column--padding;
}

.l-grid {
	display: inline-block;
	width: 100%;

	&__row {
		margin-bottom: 10px;

		&:before {
			display: table;
			content: " ";
		}

		&:after {
			display: table;
			content: " ";
			clear: both;
		}
	}

	&__item {

		@if $gutter-enabled == 'true' {
			margin-left: $gutter / 2;
			margin-right: $gutter / 2;
		}
	}
}


/* =============================================================================
	FLEXBOX GRID:: COMING SOON
============================================================================= */
